#include            <bits/stdc++.h>
#define sp          ' '
#define ln          '\n'             
#define fs          first
#define sc          second
#define ios()       cin.tie(0) -> sync_with_stdio(0);
const int px[8]  =  {0,0,-1,1,-1,-1,1,1};
const int py[8]  =  {-1,1,0,0,-1,1,-1,1};
using namespace std;

/*

9
t1 = -c
t2 = a + b
t3 = a + b
t4 = a + b
t5 = d + e
t6 = a + b
t7 = -c
t8 = d + e
t9 = 4 * t4

*/


int main(void)
{
    int n;
    cout << "Enter number of lines:\n";
    cin >> n;
    set<string> st;
    map<string, vector<string>> mp;
    map<string, string> dmp;
    cout << "\nEnter expressions:\n";
    for(int i=0; i<n; i++) {
        string str;
        cin >> str;

        string temp;
        cin >> temp;
        
        string exp;
        getline(cin, exp);
        
        st.insert(exp);
        mp[exp].push_back(str);
    }
    cout << "\nTerms are as follows:\n";
    for(auto it : st) {
        cout << it << ln;
    }
    cout << ln;
    for(auto it: mp) {
        for(int i=1; i<it.sc.size(); i++) {
            dmp[it.sc[i]] = it.sc[0];
        }
    }
    cout << "Optimised code is as follows:\n";
    for(auto it: mp) {
        string lhs = it.sc[0];
        string rhs = it.fs;
        for(int i=0; i<rhs.length(); i++) {
            if(rhs[i] == 't') {
                string mapped = "t";
                mapped += rhs[i + 1];
                if(dmp[mapped].length() == 2)
                    rhs[i + 1] = dmp[mapped][1];
            }
        }
        cout << lhs << " = " << rhs << endl;
    }
}

---------

#include <bits/stdc++.h>
using namespace std;

/*
    Make a new txt file in the same folder as this c++ file, and name it 'input.txt'
    After this, put your input in this text file and save it
    
    Input: 
    
    S->ACB|CbB|Ba
    A->da|BC
    B->g|e
    C->h|e
    
*/

set<char> ss;
bool dfs(char i, char org, char last, map<char, vector<vector<char>>> &mp){
    bool rtake = false;
    for(auto r : mp[i]){
        bool take = true;
        for(auto s : r){
            if(s == i) {
                break;
            }
            if(!take) {
                break;
            }
            if(!(s  >=  'A'  &&  s  <=  'Z')  &&  s != 'e'){
                ss.insert(s);
                break;
            }
            else if(s == 'e'){
                if(org == i || i == last)
                ss.insert(s);
                rtake = true;
                break;
            }
            else{
                take = dfs(s,org,r[r.size()-1],mp);
                rtake |= take;
            }
        }
    }
    return rtake;
}


int main(){
    int i,j;
    ifstream fin("input.txt");
    string num;
    vector<int> fs;
    vector<vector<int>>  a;
    map<char,vector<vector<char>> > mp;
    char start;
    bool flag = 0;
    cout << "Grammar: " << '\n';
    while(getline(fin,num)){
        if(flag == 0) start = num[0],flag = 1;
        cout << num << '\n';
        vector<char> temp;
        char s = num[0];
        for(i=3;i<num.size();i++){
            if(num[i] == '|'){
                mp[s].push_back(temp);
                temp.clear();
            }
            else temp.push_back(num[i]);
        }
        mp[s].push_back(temp);
    }
    map<char,set<char>>  fst;
    for(auto q : mp){
        ss.clear();
        dfs(q.first,q.first,q.first,mp);
        for(auto g : ss) fst[q.first].insert(g);
    }

    cout << '\n';
    cout << "FIRST: " << '\n';
    for(auto q : fst){
        string ans = "";
        ans += q.first;
        ans += " = {";
        for(char r : q.second){
            ans += r;
            ans += ',';
        }
        ans.pop_back();
        ans+="}";
        cout << ans << '\n';
    }

    map<char,set<char>>  grammar;
    grammar[start].insert('$');
    int count = 10;
    while(count--){
        for(auto q : mp){
            for(auto r : q.second){
                for(i=0;i<r.size()-1;i++){
                    if(r[i] >= 'A' && r[i] <= 'Z'){
                        if(!(r[i+1] >= 'A' && r[i+1] <= 'Z')) grammar[r[i]].insert(r[i+1]);
                        else {
                            char temp = r[i+1];
                            int j = i+1;
                            while(temp >= 'A' && temp <= 'Z'){
                                if(*fst[temp].begin()=='e'){
                                    for(auto g : fst[temp]){
                                        if(g=='e') continue;
                                        grammar[r[i]].insert(g);
                                    }
                                    j++;
                                    if(j<r.size()){
                                        temp = r[j];
                                        if(!(temp >= 'A' && temp <= 'Z')){
                                            grammar[r[i]].insert(temp);
                                            break;
                                        }
                                    }
                                    else{
                                        for(auto g : grammar[q.first]) grammar[r[i]].insert(g);
                                        break;
                                    }
                                }
                                else{
                                    for(auto g : fst[temp]){
                                        grammar[r[i]].insert(g);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                if(r[r.size()-1] >= 'A' && r[r.size()-1] <= 'Z'){
                    for(auto g : grammar[q.first]) grammar[r[i]].insert(g);
                }
            }
        }
    }

    cout << '\n';
    cout << "FOLLOW: " << '\n';
    for(auto q : grammar){
        string ans = "";
        ans += q.first;
        ans += " = {";
        for(char r : q.second){
            ans += r;
            ans += ',';
        }
        ans.pop_back();
        ans+="}";
        cout << ans << '\n';
    }
    return 0;
}

-------------

#include <iostream>
#include <string>
#define deb(x) cout << #x << ": " << x << endl;
#define deb2(x, y) cout << #x << ": " << x << " ~ " << #y << ": " << y << endl; 

using namespace std;
int main()
{
    string ip, op1, op2, temp;
    int sizes[10] = {};
    char c;
    int n, j, l;
    cout << "Enter the Parent Non-Terminal : ";
    cin >> c;
    ip.push_back(c);
    op1 += ip + "\'->";
    op2 += ip + "\'\'->";
    ;

    deb2(op1, op2);
    ip += "->";
    cout << "Enter the number of productions : ";
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cout << "Enter Production " << i + 1 << " : ";
        cin >> temp;
        sizes[i] = temp.size();
        ip += temp;
        if (i != n - 1)
            ip += "|";
    }
    cout << "Production Rule : " << ip << endl;
    char x = ip[3];
    for (int i = 0, k = 3; i < n; i++)
    {
        if (x == ip[k])
        {
            if (ip[k + 1] == '|')
            {
                op1 += "#";
                ip.insert(k + 1, 1, ip[0]);
                ip.insert(k + 2, 1, '\'');
                k += 4;
            }
            else
            {
                op1 += "|" + ip.substr(k + 1, sizes[i] - 1);
                ip.erase(k - 1, sizes[i] + 1);
            }
        }
        else
        {
            while (ip[k++] != '|');
        }
    }
    char y = op1[6];
    for (int i = 0, k = 6; i < n - 1; i++)
    {
        if (y == op1[k])
        {
            if (op1[k + 1] == '|')
            {
                op2 += "#";
                op1.insert(k + 1, 1, op1[0]);
                op1.insert(k + 2, 2, '\'');
                k += 5;
            }
            else
            {
                temp.clear();
                for (int s = k + 1; s < op1.length(); s++)
                    temp.push_back(op1[s]);
                op2 += "|" + temp;
                op1.erase(k - 1, temp.length() + 2);
            }
        }
    }
    op2.erase(op2.size() - 1);
    cout << "After Left Factoring : " << endl;
    cout << ip << endl;
    cout << op1 << endl;
    cout << op2 << endl;
    return 0;
}

---------------------

#include <iostream>
#include <string>
using namespace std;
int main()
{
    string ip, op1, op2, temp;
    int sizes[10] = {};
    char lhs;
    int n, j, l;
    cout << "Enter the Parent Non-Terminal : ";
    cin >> lhs;
    ip.push_back(lhs);
    op1 += ip + "\'->";
    ip += "->";
    op2 += ip;
    cout << "Enter the number of productions : ";
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cout << "Enter Production " << i + 1 << " : ";
        cin >> temp;
        sizes[i] = temp.size();
        ip += temp;
        if (i != n - 1)
            ip += "|";
    }
    cout << "Production Rule : " << ip << endl;
    for (int i = 0, k = 3; i < n; i++)
    {
        if (ip[0] == ip[k])
        {
            cout << "Production " << i + 1 << " has left recursion." << endl;
            if (ip[k] != '#')
            {
                for (l = k + 1; l < k + sizes[i]; l++)
                    op1.push_back(ip[l]);
                k = l + 1;

                // adding S' at end of op1
                op1.push_back(ip[0]);
                op1 += "\'|";
            }
        }
        else
        {
            cout << "Production " << i + 1 << " does not have left recursion." << endl;
            if (ip[k] != '#')
            {
                for (j = k; j < k + sizes[i]; j++)
                    op2.push_back(ip[j]);
                k = j + 1;
                op2.push_back(ip[0]);
                op2 += "\'|";
            }
            else
            {
                op2.push_back(ip[0]);
                op2 += "\'";
            }
        }
    }
    op1 += "#";
    cout << op2 << endl;
    cout << op1 << endl;
    return 0;
}

--------------

#include            <bits/stdc++.h>
#define sp          ' '
#define ln          '\n'             
using namespace std;

int main(void) {

    // Declaration of default values
    vector<string> keywords = {"int", "bool", "string", "float", "double", "const"};
    vector<string> operators = {"+", "-", "=", "+=", "-=", "*", "/", "^", "*=", "/=", "%", "%=", "!="};
    vector<string> seperators = {",", ";"};

    // Input the strings and seperate all words
    cout << "Enter lexemes:\n\n";
    vector<string> words;
    while(true) {
        string s;
        getline(cin, s);
        if(s.empty()) {
            break;
        }
        string word = "";
        for(int i=0; i<s.size(); i++) {
            if(s[i] == ' ') {
                words.push_back(word);
                word.clear();
            }
            else {
                word.push_back(s[i]);
            }
        }
        words.push_back(word);
    }

    // Store words according to their type
    unordered_set<string> key, op, num, sep, id;
    for(int i=0; i<words.size(); i++) {
        string s = words[i];
        int n = s.size();
        if(s[n-1] == ';' || s[i] == ',') {
            if(find(sep.begin(), sep.end(), s) != sep.end()) {
                sep.insert(s[n-1] + "");
            }
            s.erase(n-1);
        }
        if(find(keywords.begin(), keywords.end(), s) != keywords.end()) {
            key.insert(s);
        }
        else if(s[0] >= '0' && s[0] <= '9') {
            num.insert(s);
        }
        else if(find(operators.begin(), operators.end(), s) != operators.end()) {
            op.insert(s);
        }
        else {
            id.insert(s);
        }
    }

    // Printing each category 
    cout << "----------------------------------------------";
    if(!key.empty()) {
        cout << ln << "Keywords: \t";
        for(unordered_set<string> :: iterator it = key.begin(); it != key.end(); it++) {
            cout << *it << sp << sp;
        }   
        cout << ln << "----------------------------------------------";
    }
    if(!op.empty()) {
        cout << ln << "Operators: \t";
        for(unordered_set<string> :: iterator it = op.begin(); it != op.end(); it++) {
            cout << *it << sp << sp;
        }
        cout << ln << "----------------------------------------------";
    }
    if(!num.empty()) {
        cout << ln << "Numbers: \t";
        for(unordered_set<string> :: iterator it = num.begin(); it != num.end(); it++) {
            cout << *it << sp << sp;
        }
        cout << ln << "----------------------------------------------";
    }
    if(!id.empty()) {
        cout << ln << "Identifiers: \t";
        for(unordered_set<string> :: iterator it = id.begin(); it != id.end(); it++) {
            cout << *it << sp << sp;
        }
    }
    if(!sep.empty()) {
        cout << ln << ln << "Seperators: \t";
        for(unordered_set<string> :: iterator it = sep.begin(); it != sep.end(); it++) {
            cout << *it << sp << sp;
        }
    }
    cout << ln << "----------------------------------------------" << ln;;
}

----------------------

#include <bits/stdc++.h> 
using namespace std;

struct mdt
{
    char lab[10];
    char opc[10];
    char oper[10];
}d[10];
 
int main() {
    char label[10],opcode[10],operand[10],newlabel[10],newoperand[10];
    char macroname[10];
    int i,lines;
    FILE *f1,*f2,*f3;
    f1 = fopen("MACIN.txt","r");
    f2 = fopen("MACOUT.txt","w");
    f3 = fopen("MDT.txt","w");
    fscanf(f1,"%s %s %s",label,opcode,operand);
 
    while(strcmp(opcode,"END")!=0) {
        if(strcmp(opcode,"MACRO")==0) {
            strcpy(macroname,label);
            fscanf(f1,"%s%s%s",label,opcode,operand);
            lines = 0;
            while(strcmp(opcode,"MEND")!=0) {
                fprintf(f3,"%s\t%s\t%s\n",label,opcode,operand);
                strcpy(d[lines].lab,label);
                strcpy(d[lines].opc,opcode);
                strcpy(d[lines].oper,operand);
                fscanf(f1,"%s %s %s",label,opcode,operand);
                lines++;
            }
        }
        else if(strcmp(opcode,macroname)==0) {
            printf("lines = %d\n",lines);
            for(i=0;i<lines;i++) {
                fprintf(f2,"%s\t%s\t%s\n",d[i].lab,d[i].opc,d[i].oper);
                printf("Label = %s\nOp Code = %\nOperand = %s\n\n",d[i].lab,d[i].opc,d[i].oper);
            }
        }
        else
        fprintf(f2,"%s\t%s\t%s\n",label,opcode,operand);
        fscanf(f1,"%s%s%s",label,opcode,operand);
    }
    fprintf(f2,"%s\t%s\t%s\n",label,opcode,operand);
    fclose(f1);
    fclose(f2);
    fclose(f3);
    printf("\nFINISHED");
}

----------------------

#include <bits/stdc++.h>
using namespace std;

struct MDT_row
{
    int index;
    string code;
};

struct MNT_row
{
    int index;
    string name;
    int mdt_index;
};

string get_macro_name_init_ALA(string line, vector<string> &ALA)
{
    int pos = 0;
    string name = "";
    while (pos<line.length())
    {
        while(line[pos]==' ' || line[pos]==',')
        {
            pos++;
        }
        if (line[pos] == '&')
        {
            string arg = "";
            while (pos<line.length() && line[pos]!= ' ' && line[pos]!= ',')
            {
                arg += line[pos];
                pos++;
            }
            ALA.push_back(arg);
        }
        else
        {
            while (pos<line.length() && line[pos]!= ' ')
            {
                name += line[pos];
                pos++;
            }
        }
    }
    return name;
}

int search_ALA(vector<string>ALA,string arg)
{
    for (int i=0;i<ALA.size();i++)
    {
        if (ALA[i] == arg)
        {
            return i;
        }
    }
    return -1;
}

string replace_dummy_args(string line, vector<string> ALA)
{
    string res = "";
    int pos = 0;
    while (pos<line.length())
    {
        while(line[pos]==' ' || line[pos]==',')
        {
            res += line[pos];
            pos++;
        }
        if (line[pos] == '&')
        {
            string arg = "";
            while (pos<line.length() && line[pos]!= ' ' && line[pos]!= ',')
            {
                arg += line[pos];
                pos++;
            }
            int index = search_ALA(ALA,arg);
            res = res + '#' + to_string(index);
        }
        else
        {
            while (pos<line.length() && line[pos]!= ' ' && line[pos]!=',')
            {
                res += line[pos];
                pos++;
            }
        }
    }
    return res;
}

void print_MDT(vector<MDT_row>MDT)
{
    cout<<"---- Macro Definition Table ----"<<endl;
    printf("%-7s%-2s%-50s\n","Index","|","Card");
    printf("--------------------------------\n");
    for (int i=0;i<MDT.size();i++)
    {
        printf("%-7d%-2s%-50s\n",MDT[i].index,"|",MDT[i].code.c_str());
    }
    cout<<endl;
}

void print_MNT(vector<MNT_row>MNT)
{
    cout<<"---- Macro Name Table ----"<<endl;
    printf("%-7s%-2s%-10s%-2s%-7s\n","Index","|","Name","|","MDT Index");
    printf("--------------------------------\n");
    for (int i=0;i<MNT.size();i++)
    {
        printf("%-7d%-2s%-10s%-2s%-7d\n",MNT[i].index,"|",MNT[i].name.c_str(),"|",MNT[i].mdt_index);
    }
    cout<<endl;
}

void print_ALA(vector<string>ALA)
{
    cout<<"---- Argument List Array ----"<<endl;
    printf("%-7s%-2s%-10s\n","Index","|","Arguments");
    printf("--------------------------------\n");
    for (int i=0;i<ALA.size();i++)
    {
        printf("%-7d%-2s%-10s\n",i,"|",ALA[i].c_str());
    }
    cout<<endl;
}

void print_output(vector<string>output)
{
    cout<<"---- Output of Pass 1 ----"<<endl;
    for (int i=0;i<output.size();i++)
    {
        cout<<output[i]<<endl;
    }
    cout<<endl;
}

int main()
{
    ifstream inputfile("input.asm");
    string line;
    vector<string>output;
    vector<MDT_row>MDT;
    vector<MNT_row>MNT;
    vector<string>ALA;
    bool inside_macro = false;
    bool macro_name_line = false;
    int mdtc=1,mntc=1;
    while(getline(inputfile,line))
    {
        if ((line.find("MACRO")!= string::npos) || (line.find("macro")!= string::npos))
        {
            inside_macro = true;
            macro_name_line = true;
        }
        else if ((line.find("MEND")!= string::npos) || (line.find("mend")!= string::npos))
        {
            MDT_row row;
            row.index = mdtc;
            mdtc++;
            row.code = line;
            MDT.push_back(row);
            inside_macro = false;
        }
        else if (!inside_macro)
        {
            output.push_back(line);
        }
        else if (inside_macro)
        {
            if (macro_name_line)
            {
                MNT_row row;
                row.index = mntc;
                row.mdt_index = mdtc;
                mntc++;
                row.name = get_macro_name_init_ALA(line,ALA);
                MNT.push_back(row);

                MDT_row entry;
                entry.index = mdtc;
                mdtc++;
                entry.code = line;
                MDT.push_back(entry);
                macro_name_line = false;
            }
            else
            {
                MDT_row row;
                row.index = mdtc;
                mdtc++;
                row.code = replace_dummy_args(line,ALA);
                MDT.push_back(row);
            }
        }
    }
    print_MDT(MDT);
    print_MNT(MNT);
    print_ALA(ALA);
    print_output(output);
}

/*
INPUT :
	 MACRO
&LAB INCR &ARG1,&ARG2,&ARG3
&LAB ADD AREG,&ARG1
	 ADD AREG,&ARG2
	 ADD AREG,&ARG3
	 MEND

LOOP1 INCR DATA1,DATA2,DATA3
DATA1 DC F'5'
DATA2 DC F'10'
DATA3 DC F'15'
END
*/


----------------------------

#include <iostream> 
#include<bits/stdc++.h> 

using namespace std; 

int prec(char c) { 
    if (c == '^') 
        return 3; 
    else if (c == '/' || c == '*') 
        return 2; 
    else if (c == '+' || c == '-') 
        return 1; 
    else 
        return -1; 
} 

string infixToPostfix(string s) { 
    stack<char> st; 
    string result; 
    for (int i = 0; i < s.length(); i++) { 
        char c = s[i]; 
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
            result += c; 
        }
        else if (c == '(') {
            st.push('('); 
        }
        else if (c == ')') { 
            while (st.top() != '(') { 
                result += st.top(); 
                st.pop(); 
            } 
            st.pop(); 
        } 
        else { 
            while (!st.empty() && prec(s[i]) <= prec(st.top())) { 
                result += st.top(); 
                st.pop(); 
            } 
            st.push(c); 
        } 
    } 
    while (!st.empty()) { 
        result += st.top(); 
        st.pop(); 
    } 
    return result;
} 

void threeAddressCode(string postfix) { 
    vector<string> str{"t1","t2","t3","t4","t5"}; 
    int ptr = 0; 
    stack<string> stk; 
    for (char c : postfix) { 
        string tp; 
        tp += c; 
        if (tp >= "a" && tp <= "z") { 
            stk.push(tp); 
        } 
        else { 
            string ch1 = stk.top(); 
            stk.pop(); 
            string ch2 = stk.top(); 
            stk.pop(); 
            if (!stk.empty()) { 
                cout << str[ptr] << " = " << ch2 << c << ch1 << endl; 
                stk.push(str[ptr]); 
            } 
            else {
                cout << ch2 << c << ch1 << endl; 
            }
            ptr++; 
        } 
    } 
} 

int main() { 
    string exp; 
    cout << "Enter the expression:\n"; 
    cin >> exp; 
    string postfix = infixToPostfix(exp); 
    cout << "\nThe postfix of the expression is: " << postfix << endl; 
    cout << "\nThe three address code is:\n"; 
    threeAddressCode(postfix); 
    return 0; 
} 

---------------

%{

#include <string.h> 
#include <stdio.h>
#include <conio.h>

%}

%%
[^\n]+ {
	printf("Hello, %s", yytext);
}

%%

int yywrap(){}

int main() {
	yylex();
	printf("Enter your name:\n");
	return 0;
}

-----------------

%{

char *keywords[] = { "if", "else", "for", "while", "do", "int", "float", "char", "return" }; 

int isKeyword(char *word) {
    int n = sizeof(keywords) / sizeof(keywords[0]);
    for (int i=0; i<n; i++) {
        if (keywords[i] == word) {
           return 1; 
        }
    }
    return 0;
} 

%}

%%

[a-zA-Z][a-zA-Z0-9]* {
    if (isKeyword(yytext)) {
        printf("KEYWORD: %s\n", yytext);
    }
    else {
        printf("IDENTIFIER: %s\n", yytext);
    }
}

[0-9]+ printf("CONSTANT: %s\n", yytext);

\+|\=|\-|\*|\/ printf("OPERATOR: %s\n", yytext);

\(|\)|\{|;|,|\} printf("SEPARATOR: %s\n", yytext);

%%

#include <stdio.h>
#include <conio.h>
#include <string.h>

int yywrap() {}

int main() {
    yylex();
    return 0; 
} 

------------------------
